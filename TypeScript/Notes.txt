  
    what is ts?
         it is a typed superset of js . and it it developed and maintained by microsoft
         the ts is complied to js and run using a js engine      
          

how to run a ts file ?
    ts is converted into js before executing it 

    create a ts file and run the commands 
        tsc fileName --watch 
        this will create a corresponding js file to our ts 
        then the js file using browser or node 
    

    In ts there is only global scope and function scope and not block scope 
    that is

    unknown is a type-safe counterpart of any — you cannot access properties on it unless you narrow its type.

    !!obj : 	Converts any value to boolean: false for null, undefined, 0, ""; true for others


    ts will try to assign variable type at the time we define the value to it and it is called type inference

    union of type : 
        in ts we can assign a union of types to variable in that case the variable can take any one of the type 
    optional parameter :
        we can make a parameter optional by adding a question mark to it , like this 
        function some(val?:number)


    interfaces in ts : 
            interface in ts i sued to define the shape of an object in ts 

            interface is somehow similar to type 

            interface can combine multiple interface by extends keyword while type can do this by union

            use type when dealing with applications and use interface when dealing with libraries
            it means use type everywhere

                interface Animal {
                    name: string;
                    }

                interface Dog extends Animal {
                    breed: string;
                    }

                type A = { name: string };

                type B = A & { age: number };
            a class can use a interface by using the implements keyword

            class are same as that of js or java 

            access modifier are also the same in java


    Enums :
        In TypeScript, enum (short for enumeration) is used to define a set of named constants—either numeric or string-based.
                                   
    type for react children elements are 
                                        React.ReactNode

    type assertion using ts
        if we knoe the value of somthing that it will never be null after its initialisation then we can use type assertion to mark the value wont change back to null 

            eg :
            type authUser={
                name:string,
                age:number 
            }
                
            const [user,setUser]=useState(null)
            here we can manually set the value of the user to null since it inital value is null but imagine if we dont want that we only want it to be null only at the start . so what we can do is that set it value to that type 

            const [user,setUser]=useState<authUser>({}as authUser)  
            but this is not a good practice
                                                                         
                 when dealing with classes components and inorder to specify thr type of props and state we can do ti likt this
                    export class ClassComp extends Component<{}, stateProp>{}


                this first value in that type must be a prop and the 2nd one must be state and the order really matters

            in order to pass a component as a prop in react we can swt the type of that from 
                ReactNode to React.ComponentType 
            and if that component accept a prop we can configure that too 
                React.ComponetType<{name:string}>
                    
            never type 

                imagine there are multiple prop to a component and we only want one prop to have a same value like if any of the prop have any value we want other prop to have no value oe simple dont want to accpet any other prop we can set their type to never 


                type NegativeType={
                    isPositive:never;
                    isNegative:boolean;
                }
            

 
                   