    what is react hooks ?
        these are new feat added to react to amke the functional components stateful 
        it allow to use react feat without writting a class 
        hooks only works inside a functions

    why hooks ?
        to reduce the reliance on this keywords

        to handle sideeffects => useEffect hook will run on component mount,component unmount and component update so this single hook does the job of the 3 lifecyle methods (componentDidUpdate,compoentDidMount,componentWillUnmount)
        
        makes the code cleaner and more managable

        reuse logic easily 

        easier to test

    Rules for Hooks 
        
        dont call hooks inside loops , conditions and in the nested functions 
        always call hooks from react functional component and not just regular functions in js 
        only call hooks at the top level 


        useEffect() method in perfectly useful for doing side effects  in func components

        it is close replacememt for componentDidMOunt,componentDidUpdate and componentWillUnmount
        useEffect runs after render, and its behavior depends on the second argument
        it can be cutomisable in 3 ways 
            1.if we dont pass any thing or an empty array that useEfect hook eill render only omce that is when the compoenent will mount (initial)

            2.if we pass an array of element as the second arguement it will called everytime that variable changes (initial + updates to that depednency variable)

            3.if we dont pass anything it will call for each render(initial +update)
             
        useEffect with cleanup
            it is better to cleanup the useEffect hooks 
            by saying cleanup function , it is the funvtion that returns from the useEffect hook
            the fucntion we pass to use effect can return a function and that function is called as the cleanup function in useEffect 

        mistakes with useEffect ()
            when we try ot invoke a function inside the useEffect try to define that function inside useEffect hooks in tat case it is much more readable and always keep an eye on how to cleanup a function  

    Imp :Do not use template literal inside jsx components 


        useContext in react functional components
        normal method is what er learned in the beginer series 
        useContext hook will help us to consume porps from any parent component more easily      

        usage of use context api
            THE creation steps of usecontext hook  is the same as with the createCOntext api in class component
            but the difference is how we going to consume the usecontext in order to consume the data we just need to pass the created Context to the useContext hook it will return us the value we want to pass

        UseReducer hook
            it is used for state managment it is actually an alternative for useState hook 
            the useState hook is built using useReducer hook 
             

        UseReducer Hook vs Array.prototype.reduce()
            reduce funvtion is related to js 
            it takes  a reducer funtion and initial value
                syntax: array.reduce(reducerFun,initialVal)
            and it return a single value based on the calculation


            useReducer hook is related to react 

            it takes up 2 arguments recuder funcrtion adn a initial state
                syntax : reducer(currentState,action)
            it returns a pair of values [newState , dispatch=> method]

        it is more difficult than useState() 
        useReducer is more useful for complex components and not actually good for small component 

            it is more powerful that the useState hook , here one useReducer hook can monitor multple statws at the same time

           the useReducer hook will takes 2 arguments one is a reducer function  which update the state variable . the second argument to this funvtions is an object(best practice) that represent the intial state of the state variable 
           and
            we need to specify that reducer function which updates the state variable based on the type we pass 
            in the reducer function
                    it again takes 2 arguments 
                        1.prevState
                        2.action : based on this we update the state and return
            
            return type of useReducer hook 
                it return 2 things 
                    1.a variable representing the current state
                    2.a function that upadtes the values of thee state and when we call thsi function we need to pass a value as the argument ans based on that values the reducer function will works 

            eg :
                const reducer = (prevState, action) => {
                switch (action.type) {
                    case ACTION.ADD:
                    return { prevTask: [...prevState.prevTask, action.payload] };

                    case ACTION.REMOVE:
                    return {
                        prevTask: prevState.prevTask.filter((item) => item != action.payload),
                    };
                }
                };

                const [tasks, dispatch] = useReducer(reducer, { prevTask: [], type: "" });



        if we want to monitor or manage multiple states  variables that have the same state transitions it is good to use useReducer()  

        we can combine useReducer with useContext to maintain a global state management in this case same instnce of the variable and methods will be shared across all the nested child components 


        useReducer in fetching external data    
                
        
                        
        
            
         
        

         

           