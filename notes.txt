Evrything inside js happen inside the execution context

    execution context has 2 portion
        memory/varible environment : where the variables and functions are stored as a key value pairs
        code / thread of execution : where each line is executed one at a time

        js is a single threaded synchronous programing language , means it executes only one line of code at a time


    how js runs ?
        each time we create a program a execution context is created 

        in creating the execution context  ,
                        the first step is the memory creation phase in which js allocate memory to each and every variables in js
                        initially each varibale is stored with a value of undefined and for funvtions there entire definition will be stored or copied there






SOme Important array  methods
    1.filter() methods 
         these are used to filter an array of elements based on a callback functions and will return the results as a new array 
             return =>the callback function is executed once for each element , that call back function will return true or false and that element is included in the new array based on it return value
              it wont affect the original array
              after filtering an array this filter method will return a new array that pass this filter and while applying filter method to an array we are running a functions over each element of the element of the array and there it only return a true or false value and based on  that true or false value it will decide whether to selecet that element or not
              the resultant array may not need to be as same length as that of the original one
              eg:   let phones=['samsung','apple','redmi','vivo']
                    const bigPhones=phones.filter((phone)=>{
                        return phone.length>5
                    })
                    this will only contain phones thats length is bigger than 5
    2.Map() methods :
        map methods are used to transform values of an array by appling a callback function and return a new array
        it does not mutate the original array it just returns a new one
            return => the map methods return a new array whose length must be same as that of the original one and the call back funtion will return value instead of true and false and the returned value is used to create new array

    3.Find() method
        find method is used to find or return the first element from the array that satisfy the callback function until the match is found and if not return undefined
            return => it return a single after running a callback function on each element on the array 
            so find () is like filter () but here only of return the first element of the filterred result 
    
    4.forEach() method :
        this method is used to execute a callbackon each element of an array mostly used for logging each element in an array,updating dom etc 
        you cannot transform values of the array using forEach method and we cannot apply break,continue,return in forEach like we do in normal loop

        return => it wont return anything 
    
    5.some() method
        This  method is used to run a callback function for each elements of the array and it return a single boolean value only if atleast a single element passes the condition

            return => (a boolean) it return true if any one of the elements inside the array satisfy that condition else false

    6.every() method
        This is similar to some() instead it return tha single value only if every element in the array satify the condition

    7.reduce() method - kinda Important
        this methods runs a callback function on each element in the array and return a single value after performing some computaion on the element
        commonly used for summing value,multiplying ,building object etc
        the syntax is also much diff the callback function takes 2 argument 
            first one/accumulator (imp) - is the result of the previous iteration
            2nd one is the each value of the array

            and we can pass the initial value of the accumulator also as the second argument of the reduce() method but optional

                eg : let phones=['samsung','apple','redmi','vivo']
                     const bigPhones=phones.reduce((accumulator,phone)=>{
                     return accumulator+" "+phone
                      },'')
    8. includes() method
        This method accept a value and just check if present inside the array
        optionally can  use the start index as the second parameter in that case it start to check in the array after that particluar start index 
            return => return boolean if the element is there or not
    9. sort()
            this is used to sort the element in the array and the callback function can be used to sort the element in reverse order the callback function sort the lement based on 3 condition
                if a==b no change in order
                if a>b  b comes first or a>b then a-b is positive
                if a<b a comes first or a<b then a-b is negative

    10.indexOf()
        return the index of the element that we pass to this method only if it is present , -1 if not
        it only return the index of the first occurence of that element 
        only work with simple array that include strings,booleans or numbers only and not with object
    
    11.lastIndexof()
        return the index of the last occurence of the element that we passsed or else -1
        only work with simple array that include strings,booleans or numbers only and not with object

    12.findIndex() 
        uses a callback function that run through every element that matches the condition and return the index of the first element that satisfy the condition
        will work well with object also
    13. find()
        used to find the element that matches that call back function condition , this one returns that element which matches that condition rather than its index
    14.slice()
        this will create a new after sliceing the elements of the original array from the indexes we wanted 
            array.slice() => just create a new array with same values as that of the original array but this new array is not a copy of the original one( both are differnt array with diff refernce but same values)
            slice() takes 2 parameter 
                    startIndex 
                    noOfElements

            slice create a shallow copy , create a new array with diff reference so changing one wont affect the other, but for objects inside the array changing one really affect the other
                eg: let phones=[{name:'apple',cost:10},{name:'samsung',cost:10},{name:'vivo',cost:10}]
                    const test=phones.slice()
                    test[0].cost=15
                    console.log(phones);
                    console.log(test);

                    here value inside phones also changes
                    


some array oprations

        1.push()
            to add some value to teh end of the array return length of array
        2.unshift()
            to add some values at the start of the array return length of array
        3.pop()
            to remove some values from the end of the array return the popped element also 
        4.shift()
            to remove some element from the start of the array return the removed element
        5.splice (imp)
            used to reduce one or more elements from an array splice method takes two arguments 
            can be used to insert element or replace element from an array also in that case we can pass 3 arguments 
            1st one => the index we want to remove
            2nd one => no of elements we want to remove
            3rd one => the element that need to be inserted in place of the seleectd one
                eg:array.splice(2,0,[12,1])
                this will insert the array [12,1] at index 2 of that original array
        6.
