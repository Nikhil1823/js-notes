Evrything inside js happen inside the execution context

    execution context has 2 portion
        memory/varible environment : where the variables and functions are stored as a key value pairs
        code / thread of execution : where each line is executed one at a time

        js is a single threaded synchronous programing language , means it executes only one line of code at a time


    how js runs ?
        each time we create a program a execution context is created 

        in creating the execution context  ,
                        the first step is the memory creation phase in which js allocate memory to each and every variables in js
                        initially each varibale is stored with a value of undefined and for funvtions there entire definition will be stored or copied there
                        
                        in second phase js starts to assign values to the variable that we created, for each function invocation , js will create new execution context and add it at the top of the call stack and once the functon execution is complete the control comes back to the place where the function is invoked and that newly created execution context will be removed from the call stack
                        for recursion 
                            there will be nested execution context inside the global execution context
        
        what is call stack ?
                call stack is a stack ds that is used by js  to store the order of execution context , once the function invocation is completed the function will be removed form the call stack

        what is hoisting in js ?
                it is the feature of js that enable us to acces the variable (that are declared using var keyword) or function even before defining it .
                function are fully hoisted means we can call the function way before initialisation and it works just fine 
                     but for variable , name is only hoisted , means it value cannot be obtained it will be undefined , 
                     the variable that are declared using let and const are also hoisted but there are in temporal dead zone and accessing them before initialisation through the refernece error
                like for function we can invoke the funtion way before it definition but it only work with proper function using normal synatax like this function <name>(){}
                for arrow function it initially create a variable in the memory context and its value will be undefined if i try to call the function before definition and since it is arrow function defnition, is stored in a variable
                so it will throw an error saying that variable can't be called 
        how function works in js ?
                remember one thing each function has its own execution context. variable decalred inside the function will not affect the global variable even though both may have the same name , beacsue js create diff memory for these two beacsue it has diff execution context
                and the execution context will removed once the function execution is completed
        Dot notation vs Bracket notation in object 

            see the code
                
                function getProp(item,value){
                    console.log('value',item[value]);
                    
                    return item[value]?item.value:-1
                }
                console.log(getProp({a:42},'a')); here  by logic this will also need to print 42 but instead it prints undefined 
                    beacuse for dot notaion js expect static value like while using dot notaion we must need to call the object with its exact name like here item.a will work but using that dynamice variable wont works
                    but while using that bracket notation we can call that property of the object using static variable but in that case we need to pass it as string like this item['a'] or we can store that value in some varible and pass that variable instead that will also works like this item[atext]
        
        what is window object and this keyword in js
            window object is a global object that is created by the js along with the global execution context at the start of the execution of the program eventhough we have an empty js file . this windows object will be created automatically by the js engine at the start ,
            all the global variable are stored in this windows object and can be obtained using window.variableName.

            and during the creation of the window object variable js automatically create a 'this' variable and at global level it will point to the window object . 

            these global object and execution context will be created by all the js engines in browser that global object is window and in node js it is called "global"
            the global varibale that are declared using var will be attached to the window object by js and the global variable that are decalred using let or const wont be added 

        undefined vs not defined
            undefined means the variable is defined and it has its own memory in the memory context but it is not assigned a value yet so by default js assign  its value to be undefined kinda like a placeholder
            in other hand not defined means that varibale is not defined or it is absent in the memory context
        
        Scope chain in js

            whenever an execution context is created a local memory (where the variable inside that code or function will be stored ,that memory address) and a lexical enviroment is created
            by saying lexical environment it means that a refernce to the parent's lexical environment , for the outer most or the global execution context this lexical enviroment point to null

            so when we try to access a varible js first try to search it inside the local scope then its lexical env and if it is not there it will move it further up its parents lexical env and up until it find the element or get null(value of the global lexical env)

            by simply scop means the area or the places where we can access a variabel or funtion inside a js program



        are let and const variables are hoisted or not

            yes byt they live in a place called dead temoral zone 

        what is dead temporal zone in js
            it is the time period from when a let or const variable is hoisted to when it is assigned a value. that time period or time gap is called a temporal dead zone
            and when we try to accesss a variable inside a temporal dead zone it gives us referenceError.
   

        var vs let and const
            variable that are declared using var can be redeclared within in the same scope 
            but cant do with let or const variables


        what is a block in js ?
            simply -> it is the set of statement that are written inside a pair of {}
            block is used to combine multiple statement together and to use it where js except only one .
            block scope : means what all the functions and variables that we can access within a block.
            variables declared using let and const are block scoped and are only accessible within a block

        what is shadowing in js ?

            when we redeclare a variable that is decared using var keyword the previous value of the varibale will be replaced with this new value adn this is known as shadowing.
            happens when a variable declared in inner scope has  same name as a variable has the same name as in the outer scope then the inner one shadows the outer one 

            fake shadowing : is when we try to redeclare a block variable using a var keyword within the block elemenet scope
            happens when we try to declare the a block varibale and redeclare them using var keyword in the same or inner scope

        what is closure ?

            closure means a function bundles with it lexical parent or lexicals scope 
            here 
                function a(){
                    let x=10;
                    function b(){
                        console.log(x)
                    }
                    return b;
                }
                let y=a(); here we get teh function b as it was returned by the function a

                // some lines of code
                y(); but here when we try to invoke the funtion b using y , we know that the function a is already out of the execution context 
                so since it is not out of the context we assume b to print notdefined error but that where closure comes into play , even though a() is out of the stack b still got it closure that means b() still got all the refernce of its parents function so even though a() is out b still has its varibale reference stored in its closure

                closure are created every time a function is declared inside another function and returned or used later

        some use cases of closure 
            closure are used in
                module design pattern
                currying => used to break function with n arguments into n  unitary funtion or n  function sthta takes single arguments each
                function like once => those are function that are desiged to run only once
                memoization => to imporve performance by caching the result 
                maintiaining state in async world
                iteration
                set timeouts

        how setTimeout Works ?
            in setTimeout the callback is taken out and get attched that timer and it will be placed somehere other than callstack and rest of the code will continue execution and when this timer exceeds the setTimeout will take that callback function and append it to the call stack















Some Important array  methods
    1.filter() methods 
         these are used to filter an array of elements based on a callback functions and will return the results as a new array 
             return =>the callback function is executed once for each element , that call back function will return true or false and that element is included in the new array based on it return value
              it wont affect the original array
              after filtering an array this filter method will return a new array that pass this filter and while applying filter method to an array we are running a functions over each element of the element of the array and there it only return a true or false value and based on  that true or false value it will decide whether to selecet that element or not
              the resultant array may not need to be as same length as that of the original one
              eg:   let phones=['samsung','apple','redmi','vivo']
                    const bigPhones=phones.filter((phone)=>{
                        return phone.length>5
                    }) 
                    this will only contain phones thats length is bigger than 5
    2.Map() methods :
        map methods are used to transform values of an array by appling a callback function and return a new array
        it does not mutate the original array it just returns a new one
            return => the map methods return a new array whose length must be same as that of the original one and the call back funtion will return value instead of true and false and the returned value is used to create new array

    3.Find() method
        find method is used to find or return the first element from the array that satisfy the callback function until the match is found and if not return undefined
            return => it return a single after running a callback function on each element on the array 
            so find () is like filter () but here only of return the first element of the filterred result 
    
    4.forEach() method :
        this method is used to execute a callbackon each element of an array mostly used for logging each element in an array,updating dom etc 
        you cannot transform values of the array using forEach method and we cannot apply break,continue,return in forEach like we do in normal loop

        return => it wont return anything 
    
    5.some() method
        This  method is used to run a callback function for each elements of the array and it return a single boolean value only if atleast a single element passes the condition

            return => (a boolean) it return true if any one of the elements inside the array satisfy that condition else false

    6.every() method
        This is similar to some() instead it return tha single value only if every element in the array satify the condition

    7.reduce() method - kinda Important
        this methods runs a callback function on each element in the array and return a single value after performing some computaion on the element
        commonly used for summing value,multiplying ,building object etc
        the syntax is also much diff the callback function takes 2 argument 
            first one/accumulator (imp) - is the result of the previous iteration
            2nd one is the each value of the array

            and we can pass the initial value of the accumulator also as the second argument of the reduce() method but optional

                eg : let phones=['samsung','apple','redmi','vivo']
                     const bigPhones=phones.reduce((accumulator,phone)=>{
                     return accumulator+" "+phone
                      },'')
    8. includes() method
        This method accept a value and just check if present inside the array
        optionally can  use the start index as the second parameter in that case it start to check in the array after that particluar start index 
            return => return boolean if the element is there or not
    9. sort()
            this is used to sort the element in the array and the callback function can be used to sort the element in reverse order the callback function sort the lement based on 3 condition
                if a==b no change in order
                if a>b  b comes first or a>b then a-b is positive
                if a<b a comes first or a<b then a-b is negative

    10.indexOf()
        return the index of the element that we pass to this method only if it is present , -1 if not
        it only return the index of the first occurence of that element 
        only work with simple array that include strings,booleans or numbers only and not with object
    
    11.lastIndexof()
        return the index of the last occurence of the element that we passsed or else -1
        only work with simple array that include strings,booleans or numbers only and not with object

    12.findIndex() 
        uses a callback function that run through every element that matches the condition and return the index of the first element that satisfy the condition
        will work well with object also
    13. find()
        used to find the element that matches that call back function condition , this one returns that element which matches that condition rather than its index
    14.slice()
        this will create a new after sliceing the elements of the original array from the indexes we wanted 
            array.slice() => just create a new array with same values as that of the original array but this new array is not a copy of the original one( both are differnt array with diff refernce but same values)
            slice() takes 2 parameter 
                    startIndex 
                    noOfElements

            slice create a shallow copy , create a new array with diff reference so changing one wont affect the other, but for objects inside the array changing one really affect the other
                eg: let phones=[{name:'apple',cost:10},{name:'samsung',cost:10},{name:'vivo',cost:10}]
                    const test=phones.slice()
                    test[0].cost=15
                    console.log(phones);
                    console.log(test);
 
                    here value inside phones also changes




some array oprations

        1.push()
            to add some value to teh end of the array return length of array
        2.unshift()
            to add some values at the start of the array return length of array
        3.pop()
            to remove some values from the end of the array return the popped element also 
        4.shift()
            to remove some element from the start of the array return the removed element
        5.splice (imp)
            used to reduce one or more elements from an array splice method takes two arguments 
            can be used to insert element or replace element from an array also in that case we can pass 3 arguments 
            1st one => the index we want to remove
            2nd one => no of elements we want to remove
            3rd one => the element that need to be inserted in place of the seleectd one
                eg:array.splice(2,0,[12,1])
                this will insert the array [12,1] at index 2 of that original array
        6.
